odedab, okeren
Oded Abrams (203011226), Or Keren (301644522)
EX: 1

FILES:
osm.cpp -- a library which measures the time the computer takes to do several things


REMARKS:

ANSWERS:

Task1: 
The program first creates two directories (relative path) "os" and a subdirectory "2015" 
(i.e: "os/2015") using the mkdir function
It then uses the brk() function to allocate memory.
Then the open function is called, which creates a file called "info" under "os/2015" directory using the following
flags:
O_WRONLY - The file will only be writable
O_CREAT - The file will be created if it does not exist
O_TRUNC - If the file DOES exist, then it is overwritten
The function open returns 3, which indicates that the file was created correctly with no errors, and the number 3
is the file identifier.

After creating the file, the fstat function is called to retrieve information regarding the file, and mmap is called
to map the file into virtual memory. It uses the flags PROT_READ and PROT_WRITE to protect the file in memory from
reading and writing

Afterwards the function calls the write function, which writes into the file 122 blank spaces. 
The program then calls the close function, which closes the file stream for the current file ("info"). It unmaps
the file from the virtual memory and then removes the folders "os/2015" and "os" using rmdir function.

In summary: The program creates a directory and a subdirectory "os/2015", creates a file called info inside "2015" 
directory, writes 122 spaces in it, and then deletes the folders (and file)


Task2:
1) Let us look at two examples that show the unwanted side-effects of using interrupts:
	a) Let there be two programs D and W, Where D is a program the is about to delete a certain file
	   and W is a program that wants to write into the certain file (that is about to be deleted)
	   The CPU will run program D first. It will run the program and when reaching the program's
	   "delete file" command, it will pause, save the current state and send the delete request
	   to the relevant I/O device.
	   While waiting for the I/O device to finish deleting, the CPU will run the W program.
	   The CPU will reach the "write to file" command and then save the current state and send the
	   write command to the I/O device.
	   When the I/O device finishes deleting the file, it will send and INT to the CPU announcing
	   that it has finished, which will cause program D to return to the CPU and finish running.
	   At this stage, the file does not exist, and thus when the I/O will receive the command to
	   write to the deleted file it will send an INT to the CPU announcing that an exception has 
	   occurred.
	b) Let there be a program that uses the system clock for a continuous amount of time (i.e it 
	   has to sit on the CPU for a "long" time sampling the system clock and computing something 
	   with it). If during the operation of the program, an INT was sent by an Input device like 
	   the Mouse or Keyboard, then the CPU must save the current state of the program and deal with
	   the INT before restoring the state and allowing the program to continue. 
	   This will cause the program's sampling of time during its operation to be skewed, since it 
	   was not on the CPU continuously for the whole duration it "needed" to.
	   
2) If we choose to block all incoming interruptions, in both the cases above, it will indeed solve the
problem caused by the interaction between the interruptions. However, while any program is running
in the CPU at any given time will cause the computer to "hang", i.e. be completely inresponsive to
to input.
